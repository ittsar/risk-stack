import React, { useEffect, useMemo, useState } from 'react';
import { apiRequest } from '../api/client';
import { useAuth } from '../context/AuthContext';
import CollapsibleFormSection from './CollapsibleFormSection';

const statusOptions = [
    { value: 'open', label: 'Open' },
    { value: 'in_review', label: 'In Review' },
    { value: 'mitigating', label: 'Mitigating' },
    { value: 'accepted', label: 'Accepted' },
    { value: 'closed', label: 'Closed' },
];

const severityOptions = [
    { value: 'critical', label: 'Critical' },
    { value: 'high', label: 'High' },
    { value: 'medium', label: 'Medium' },
    { value: 'low', label: 'Low' },
    { value: 'informational', label: 'Informational' },
];

const initialState = {
    reference_id: '',
    title: '',
    description: '',
    status: 'open',
    severity: 'medium',
    cve_id: '',
    cvss_score: '',
    cvss_vector: '',
    published_date: '',
    control_ids: [],
    risk_ids: [],
};

const VulnerabilityForm = ({
    mode = 'create',
    vulnerability = null,
    onSuccess,
    onCancel,
    isCollapsed,
    setIsCollapsed,
}) => {
    const { token } = useAuth();
    const [formData, setFormData] = useState(initialState);
    const [controls, setControls] = useState([]);
    const [risks, setRisks] = useState([]);
    const [loadingReferences, setLoadingReferences] = useState(false);
    const [error, setError] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
        if (!token) {
            return;
        }

        const loadReferences = async () => {
            try {
                setLoadingReferences(true);
                const [controlResp, riskResp] = await Promise.all([
                    apiRequest('/api/controls/', { token }),
                    apiRequest('/api/risks/', { token }),
                ]);
                setControls(controlResp.results ?? controlResp ?? []);
                setRisks(riskResp.results ?? riskResp ?? []);
            } catch (err) {
                setError('Failed to load reference data.');
            } finally {
                setLoadingReferences(false);
            }
        };

        loadReferences();
    }, [token]);

    useEffect(() => {
        if (mode === 'edit' && vulnerability) {
            setFormData({
                reference_id: vulnerability.reference_id || '',
                title: vulnerability.title || '',
                description: vulnerability.description || '',
                status: vulnerability.status || 'open',
                severity: vulnerability.severity || 'medium',
                cve_id: vulnerability.cve_id || '',
                cvss_score:
                    vulnerability.cvss_score === null || vulnerability.cvss_score === undefined
                        ? ''
                        : String(vulnerability.cvss_score),
                cvss_vector: vulnerability.cvss_vector || '',
                published_date: vulnerability.published_date || '',
                control_ids: (vulnerability.controls || []).map((item) => item.id),
                risk_ids: (vulnerability.risks || []).map((item) => item.id),
            });
        } else {
            setFormData(initialState);
        }
    }, [mode, vulnerability]);

    const handleFieldChange = (event) => {
        const { name, value } = event.target;
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleMultiChange = (name, value) => {
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (event) => {
        event.preventDefault();
        if (!token) {
            return;
        }

        setIsSubmitting(true);
        setError(null);

        const payload = {
            ...formData,
            cvss_score: formData.cvss_score === '' ? null : Number(formData.cvss_score),
            published_date: formData.published_date || null,
        };

        try {
            if (mode === 'edit' && vulnerability) {
                await apiRequest(`/api/vulnerabilities/${vulnerability.id}/`, {
                    method: 'PATCH',
                    token,
                    body: payload,
                });
                onSuccess?.();
                onCancel?.();
            } else {
                await apiRequest('/api/vulnerabilities/', {
                    method: 'POST',
                    token,
                    body: payload,
                });
                setFormData(initialState);
                onSuccess?.();
                setIsCollapsed?.(true);
            }
        } catch (err) {
            setError('Failed to save vulnerability. Review the form and try again.');
        } finally {
            setIsSubmitting(false);
        }
    };

    const collapsed = typeof isCollapsed === 'boolean' ? isCollapsed : false;
    const heading =
        mode === 'edit' && vulnerability
            ? `Edit Vulnerability - ${vulnerability.title}`
            : mode === 'edit'
            ? 'Edit Vulnerability'
            : 'Create New Vulnerability';
    const toggleLabel = collapsed
        ? mode === 'edit'
            ? 'Expand editor'
            : 'New vulnerability'
        : 'Collapse';

    const controlOptions = useMemo(() => controls, [controls]);
    const riskOptions = useMemo(() => risks, [risks]);

    return (
        <CollapsibleFormSection
            heading={heading}
            isCollapsed={collapsed}
            toggleLabel={toggleLabel}
            onToggle={() => setIsCollapsed?.(!collapsed)}
        >
            <form onSubmit={handleSubmit} className="form-grid">
                <div className="grid-two-columns" style={{ gap: '16px' }}>
                    <div style={{ display: 'grid', gap: '8px' }}>
                        <label htmlFor={`vuln-reference-${mode}`}>Reference ID</label>
                        <input
                            id={`vuln-reference-${mode}`}
                            name="reference_id"
                            value={formData.reference_id}
                            onChange={handleFieldChange}
                            placeholder="e.g. VULN-001"
                        />
                    </div>
                    <div style={{ display: 'grid', gap: '8px' }}>
                        <label htmlFor={`vuln-title-${mode}`}>Title</label>
                        <input
                            id={`vuln-title-${mode}`}
                            name="title"
                            value={formData.title}
                            onChange={handleFieldChange}
                            required
                        />
                    </div>
                </div>

                <div style={{ display: 'grid', gap: '8px' }}>
                    <label htmlFor={`vuln-description-${mode}`}>Description</label>
                    <textarea
                        id={`vuln-description-${mode}`}
                        name="description"
                        rows={3}
                        value={formData.description}
                        onChange={handleFieldChange}
                    />
                </div>

                <div className="grid-three-columns" style={{ gap: '16px' }}>
                    <div style={{ display: 'grid', gap: '8px' }}>
                        <label htmlFor={`vuln-status-${mode}`}>Status</label>
                        <select
                            id={`vuln-status-${mode}`}
                            name="status"
                            value={formData.status}
                            onChange={handleFieldChange}
                        >
                            {statusOptions.map((option) => (
                                <option key={option.value} value={option.value}>
                                    {option.label}
                                </option>
                            ))}
                        </select>
                    </div>
                    <div style={{ display: 'grid', gap: '8px' }}>
                        <label htmlFor={`vuln-severity-${mode}`}>Severity</label>
                        <select
                            id={`vuln-severity-${mode}`}
                            name="severity"
                            value={formData.severity}
                            onChange={handleFieldChange}
                        >
                            {severityOptions.map((option) => (
                                <option key={option.value} value={option.value}>
                                    {option.label}
                                </option>
                            ))}
                        </select>
                    </div>
                    <div style={{ display: 'grid', gap: '8px' }}>
                        <label htmlFor={`vuln-published-${mode}`}>Published Date</label>
                        <input
                            type="date"
                            id={`vuln-published-${mode}`}
                            name="published_date"
                            value={formData.published_date}
                            onChange={handleFieldChange}
                        />
                    </div>
                </div>

                <div className="grid-three-columns" style={{ gap: '16px' }}>
                    <div style={{ display: 'grid', gap: '8px' }}>
                        <label htmlFor={`vuln-cve-${mode}`}>CVE ID</label>
                        <input
                            id={`vuln-cve-${mode}`}
                            name="cve_id"
                            value={formData.cve_id}
                            onChange={handleFieldChange}
                        />
                    </div>
                    <div style={{ display: 'grid', gap: '8px' }}>
                        <label htmlFor={`vuln-cvss-${mode}`}>CVSS Score</label>
                        <input
                            id={`vuln-cvss-${mode}`}
                            name="cvss_score"
                            type="number"
                            step="0.1"
                            min="0"
                            max="10"
                            value={formData.cvss_score}
                            onChange={handleFieldChange}
                        />
                    </div>
                    <div style={{ display: 'grid', gap: '8px' }}>
                        <label htmlFor={`vuln-vector-${mode}`}>CVSS Vector</label>
                        <input
                            id={`vuln-vector-${mode}`}
                            name="cvss_vector"
                            value={formData.cvss_vector}
                            onChange={handleFieldChange}
                        />
                    </div>
                </div>

                <div className="grid-two-columns" style={{ gap: '24px' }}>
                    <div style={{ display: 'grid', gap: '8px' }}>
                        <label>Associated Controls</label>
                        <MultiCheckbox
                            options={controlOptions}
                            selected={formData.control_ids}
                            onChange={(value) => handleMultiChange('control_ids', value)}
                            labelKey="reference_id"
                            helperText={loadingReferences ? 'Loading controls...' : undefined}
                        />
                    </div>
                    <div style={{ display: 'grid', gap: '8px' }}>
                        <label>Associated Risks</label>
                        <MultiCheckbox
                            options={riskOptions}
                            selected={formData.risk_ids}
                            onChange={(value) => handleMultiChange('risk_ids', value)}
                            labelKey="title"
                            helperText={loadingReferences ? 'Loading risks...' : undefined}
                        />
                    </div>
                </div>

                {error && <p style={{ color: 'var(--color-danger)', margin: 0 }}>{error}</p>}

                <div style={{ display: 'flex', gap: '12px' }}>
                    <button type="submit" disabled={isSubmitting}>
                        {isSubmitting ? 'Saving...' : mode === 'edit' ? 'Save changes' : 'Create vulnerability'}
                    </button>
                    {mode === 'edit' && onCancel ? (
                        <button
                            type="button"
                            onClick={onCancel}
                            style={{
                                padding: '10px 16px',
                                borderRadius: '8px',
                                border: '1px solid var(--color-border)',
                                background: 'transparent',
                                cursor: 'pointer',
                            }}
                        >
                            Cancel
                        </button>
                    ) : null}
                </div>
            </form>
        </CollapsibleFormSection>
    );
};

const MultiCheckbox = ({ options, selected, onChange, labelKey = 'name', helperText }) => {
    const toggle = (value) => {
        if (selected.includes(value)) {
            onChange(selected.filter((item) => item !== value));
        } else {
            onChange([...selected, value]);
        }
    };

    if (!options || options.length === 0) {
        return <p style={{ color: 'var(--color-text-muted)' }}>{helperText || 'No options available yet.'}</p>;
    }

    return (
        <div
            style={{
                border: '1px solid var(--color-border)',
                borderRadius: '6px',
                background: 'var(--color-surface-lighter)',
                color: 'var(--color-text)',
                maxHeight: '240px',
                overflowY: 'auto',
                padding: '12px',
                display: 'grid',
                gap: '8px',
            }}
        >
            {options.map((option) => (
                <label key={option.id} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <input type="checkbox" checked={selected.includes(option.id)} onChange={() => toggle(option.id)} />
                    <span>
                        {option[labelKey] || option.name || option.reference_id}
                        {labelKey === 'reference_id' && option.name ? ` - ${option.name}` : ''}
                        {labelKey === 'title' && option.severity_label ? ` (${option.severity_label})` : ''}
                    </span>
                </label>
            ))}
        </div>
    );
};

export default VulnerabilityForm;
